---
- name: Copy Nginx configuration nginx-frontend.conf
  become: true
  ansible.builtin.template:
    src: nginx-frontend.conf.j2
    dest: "/etc/nginx/sites-available/{{ frontend_host }}.conf"
    mode: "644"

- name: Enable Nginx site nginx-frontend.conf
  become: true
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ frontend_host }}.conf"
    dest: "/etc/nginx/sites-enabled/{{ frontend_host }}.conf"
    state: link

- name: Check if the certificate file exists
  become: true
  ansible.builtin.stat:
    path: "/etc/letsencrypt/live/{{ frontend_host }}/fullchain.pem"
  register: cert_file

- name: Nginx stop
  become: true
  ansible.builtin.service:
    name: nginx
    state: stopped
  when: cert_file.stat.exists

- name: Obtain SSL certificate
  become: true
  ansible.builtin.command:
    cmd: "certbot certonly --standalone -d {{ frontend_host }} --non-interactive --agree-tos --email tyutyunov@braind.agency"
    creates: "/etc/letsencrypt/live/{{ frontend_host }}/fullchain.pem"

- name: Nginx reloaded
  become: true
  ansible.builtin.service:
    name: nginx
    state: restarted

- name: Update web image tag in .env file
  become: true
  become_user: "{{ docker_user }}"
  ansible.builtin.lineinfile:
    path: "~/app/.env"
    regexp: '^FRONTEND_IMAGE_TAG='
    line: "FRONTEND_IMAGE_TAG={{ frontend_image_tag }}"
    create: true
    mode: "644"

- name: Run `docker-compose up`
  become: true
  become_user: "{{ docker_user }}"
  community.docker.docker_compose_v2:
    project_src: "~/app/"
    services:
      - frontend
